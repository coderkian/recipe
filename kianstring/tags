!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CC	Makefile	/^CC=g++$/;"	m
CSTRING_HPP	cstring.hpp	2;"	d
KIANSTRING_HPP	kianstring.hpp	2;"	d
KianString	kianstring.hpp	/^	KianString(const KianString &str){$/;"	f	class:KianString
KianString	kianstring.hpp	/^	KianString(const char *c): ch_(0) {$/;"	f	class:KianString
KianString	kianstring.hpp	/^class KianString{$/;"	c
MAKE	Makefile	/^MAKE=make$/;"	m
OBJS	Makefile	/^OBJS=$(SRCS:%.cpp=%.o)$/;"	m
RM	Makefile	/^RM = -rm -rf$/;"	m
SRCS	Makefile	/^SRCS=$(wildcard *.cpp)$/;"	m
TARGET	Makefile	/^TARGET=main$/;"	m
c_str	kianstring.hpp	/^	char *c_str() const {return ch_;};$/;"	f	class:KianString
ch_	kianstring.hpp	/^	KianString(KianString &&str) noexcept : ch_(str.ch_) {$/;"	f	class:KianString
ch_	kianstring.hpp	/^	char *ch_;$/;"	m	class:KianString
main	main.cpp	/^int main(int argc, char **grgv){$/;"	f
operator !=	kianstring.hpp	/^	bool operator!=(const KianString &str){$/;"	f	class:KianString
operator +	kianstring.hpp	/^const T operator+(const T& lhs, const T& rhs) {$/;"	f
operator +=	kianstring.hpp	/^	KianString &operator+=(const KianString &str){$/;"	f	class:KianString
operator <<	kianstring.cpp	/^ostream &operator<<(ostream &os, const KianString &str){$/;"	f
operator ==	kianstring.hpp	/^	bool operator==(const KianString &str1){$/;"	f	class:KianString
operator []	kianstring.hpp	/^	char &operator[](std::size_t n){return ch_[n];}$/;"	f	class:KianString
operator []	kianstring.hpp	/^	const char &operator[](std::size_t n)const  {return ch_[n];}$/;"	f	class:KianString
size	kianstring.hpp	/^	int size() const {return strlen(ch_);};$/;"	f	class:KianString
strcat	cstring.cpp	/^char *strcat (char *dst, const char *ct) {$/;"	f
strchr	cstring.cpp	/^char *strchr(const char *cs, int c){$/;"	f
strcmp	cstring.cpp	/^int strcmp (const char *cs, const char *ct) {$/;"	f
strcpy	cstring.cpp	/^char *strcpy (char *dst,const char *src) {$/;"	f
strcspn	cstring.cpp	/^int strcspn (const char *cs,const char *ct){$/;"	f
strlen	cstring.cpp	/^unsigned int strlen (const char *cs){$/;"	f
strncpy	cstring.cpp	/^char *strncpy (char *dst, const char *src, int n) {$/;"	f
strpbrk	cstring.cpp	/^char *strpbrk(const char *cs, const char *ct){$/;"	f
strrchr	cstring.cpp	/^char *strrchr(const char *cs, int c){$/;"	f
strspn	cstring.cpp	/^int strspn (const char *cs,const char *ct){$/;"	f
strstr	cstring.cpp	/^char *strstr (const char *cs,const char *ct){$/;"	f
swap	kianstring.cpp	/^inline void swap(KianString &str1, KianString &str2){$/;"	f
~KianString	kianstring.hpp	/^	~KianString(){$/;"	f	class:KianString
